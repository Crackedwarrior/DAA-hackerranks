import os
import sys

#
# Complete the 'unboundedKnapsack' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER k
#  2. INTEGER_ARRAY arr
#

def unboundedKnapsack(k, arr):
    dp = [False] * (k + 1)
    dp[0] = True  # A sum of 0 is always possible
    
    for num in arr:
        for j in range(num, k + 1):
            if dp[j - num]:
                dp[j] = True
    
    for i in range(k, -1, -1):
        if dp[i]:
            return i
    return 0

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    
    t = int(input().strip())
    
    for _ in range(t):
        first_multiple_input = input().rstrip().split()
        n = int(first_multiple_input[0])
        k = int(first_multiple_input[1])
        arr = list(map(int, input().rstrip().split()))
        
        result = unboundedKnapsack(k, arr)
        
        fptr.write(str(result) + '\n')
    
    fptr.close()
